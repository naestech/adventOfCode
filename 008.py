def find_antinodes(grid):
    grid = [list(line) for line in grid.strip().split('\n')]
    rows = len(grid)
    cols = len(grid[0])
    
    antennas = {}
    for r in range(rows):
        for c in range(cols):
            if grid[r][c] != '.':
                freq = grid[r][c]
                if freq not in antennas:
                    antennas[freq] = []
                antennas[freq].append((r, c))
    
    antinodes = set()
    
    for r in range(rows):
        for c in range(cols):
            for freq, positions in antennas.items():
                if len(positions) < 2:
                    continue
                    
                for i in range(len(positions)):
                    for j in range(i + 1, len(positions)):
                        r1, c1 = positions[i]
                        r2, c2 = positions[j]
                        
                        if (c2-c1)*(r-r1) == (r2-r1)*(c-c1):
                            antinodes.add((r, c))
                
                if len(positions) >= 2:
                    antinodes.update(positions)
    
    return len(antinodes)

puzzleInput = """
.....................................O..V.........
..................................................
................................O.........Z.......
....W....................................V....v...
........................m................8........
.....................................n........Z..v
.............F.....3...n....5m....................
................................................V.
................3............iv....Z.............V
...........................O..n..i........p......H
......W..6..............................i.........
......................................b...........
..................................n........p......
........M.......c...........m..5......1...........
...M............................L..5..A...........
...w...........9.............F5..................q
.W.....................................q....p.....
.......W........r.......H.....LA......q...........
................4.F....................A..........
........3.......a.....F...................A..L....
....ME...............................Q..........q.
.E..................ih...................Z........
................E...H...........h.................
.........m.........X..............................
..................0......C.................h......
.M......l.................Q.h.....................
..........C..............0........................
.............lX............3.c....................
......8.X.........c....r..a......H.....9..........
.................QE.....C.........................
..R................a........Q...................7.
...........................a......................
l..........X.R............1..I..........9.........
.................0R..............b.....z......x...
.......l.....w....r..........................b....
.8..........0...................P1z...............
.............c.........................L..........
.................C..N............o............9...
...........e..f..N................................
8.............................B...................
...........4...............................x......
....w....RY..........4.......................P....
.........yw.....Y.............o2...............7..
..6y........4..............fo..............7......
.........Y..6............o......................x.
.....Y....e.....y..I.r...........2................
....e.............................P.......z.bB....
.............6.................B........7......x..
..y.N........f...........1....I....z....B.........
.....e....f.............I.................2.......
"""

result = find_antinodes(puzzleInput)
print(f"Number of unique antinode locations: {result}")